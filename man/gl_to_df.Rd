% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_alleles.R
\name{gl_to_df}
\alias{gl_to_df}
\title{Convert a vector of GL Strings to a data frame with one column per allele}
\usage{
gl_to_df(glstrings)
}
\arguments{
\item{glstrings}{A character vector of GL Strings.}
}
\value{
A data frame with the following three columns:
\enumerate{
\item \code{glstring_index} Counter for each GL String in the vector
\item \code{namespace} (e.g. \code{"hla"})
\item \code{version_or_date} (e.g. \code{"3.29.0"} or \code{"2023-05-27"})
}

In addition, the data frame will have one column for every locus/allele
found in the GL strings (e.g. \code{A_1}, \code{A_2}, \code{B_1}, \code{B_2}, \code{C_1}, \code{C_2}
for a class I typing).
}
\description{
\code{gl_to_df()} takes in a character vector of
\href{https://glstring.org}{GL Strings}, and transforms it into a wide data frame
with one row per GL String and one column per allele.
}
\examples{
glstrings <-
  c(
    "hla#2023#HLA-A*01:01^HLA-B*07:01+HLA-B*08:01^HLA-C*01:01+HLA-C*03:04",
    "hla#2023#HLA-A*02:01+HLA-A*03:01^HLA-B*07:02+HLA-B*08:02^HLA-C*01:02"
  )
gl_to_df(glstrings)

# If your GL Strings are in a data frame with some ID'ing columns that you
# want to keep attached, call `gl_to_df()` on the GL String column in your
# data frame:
typing_df <- tidyr::tibble(
  id = c("001", "002"),
  glstrings = c(
    "hla#2023#HLA-A*01:01:01:01+HLA-A*02:07",
    "hla#2023#HLA-DRA*01:02:02:05+HLA-DRA*01:04"
  )
)
typing_df |>
  dplyr::mutate(gl_df = gl_to_df(glstrings)) |> # make the data frame
  tidyr::unnest(gl_df) # combine with your existing data frame
}
\seealso{
\itemize{
\item \code{\link[=gl_to_vec]{gl_to_vec()}} for the basic conversion of a GL String to a vector
\item \code{\link[=df_to_gl]{df_to_gl()}} for the opposite operation
}
}
